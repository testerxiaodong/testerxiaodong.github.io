<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Charles on cengdong的技术博客</title>
        <link>https://www.cengdong.store/categories/charles/</link>
        <description>Recent content in Charles on cengdong的技术博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Cengdong</copyright>
        <lastBuildDate>Sun, 27 Apr 2025 21:31:43 +0800</lastBuildDate><atom:link href="https://www.cengdong.store/categories/charles/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>【Charles】Charles功能大全</title>
        <link>https://www.cengdong.store/p/charlescharles%E5%8A%9F%E8%83%BD%E5%A4%A7%E5%85%A8/</link>
        <pubDate>Sun, 27 Apr 2025 21:31:43 +0800</pubDate>
        
        <guid>https://www.cengdong.store/p/charlescharles%E5%8A%9F%E8%83%BD%E5%A4%A7%E5%85%A8/</guid>
        <description>&lt;h2 id=&#34;为什么要写-charles&#34;&gt;为什么要写 Charles
&lt;/h2&gt;&lt;p&gt;最近又重返测试岗位，作为一名测试工作人员，掌握好代理工具，分析 bug 产生的原因，是一项必不可少的技能&lt;/p&gt;
&lt;h2 id=&#34;需要掌握的代理工具有哪些&#34;&gt;需要掌握的代理工具有哪些
&lt;/h2&gt;&lt;p&gt;或者说那些代理工具值得掌握&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Charles Fildder 二选一(因为习惯用 mac， 更倾向于 Charles)&lt;/li&gt;
&lt;li&gt;Mitmproxy(这个我觉得是更好的选项，code first, 灵活性更强)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;charles-常用功能&#34;&gt;Charles 常用功能
&lt;/h2&gt;&lt;h3 id=&#34;流量过滤&#34;&gt;流量过滤
&lt;/h3&gt;&lt;p&gt;过滤自己能看到的包有两种选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Proxy -&amp;gt; recording settings -&amp;gt; include/exclude&lt;/li&gt;
&lt;li&gt;左下角填写过滤表达式(我一般都按照域名过滤)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;并发测试&#34;&gt;并发测试
&lt;/h3&gt;&lt;p&gt;其实不算是什么并发，就是 repeat 请求，advanced repeat 可以指定并发数&lt;/p&gt;
&lt;p&gt;在少量的批量接口调用时可以方便使用，会默认新建一个 seesion&lt;/p&gt;
&lt;h3 id=&#34;断点&#34;&gt;断点
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;breaking points&lt;/code&gt;可以对请求和响应进行截断并修改，最近在支付测试的时候用的多&lt;/p&gt;
&lt;p&gt;对符合&lt;code&gt;breaking points&lt;/code&gt;规则的每一个请求/响应都会进行截断&lt;/p&gt;
&lt;p&gt;如果是需要每次都修改响应，可以使用&lt;code&gt;map local&lt;/code&gt;更为方便&lt;/p&gt;
&lt;h3 id=&#34;compose&#34;&gt;compose
&lt;/h3&gt;&lt;p&gt;compose 可以生成一个新的请求，代替 postman 接口测试？&lt;/p&gt;
&lt;h3 id=&#34;重定向&#34;&gt;重定向
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;map local&lt;/code&gt;(本地重定向，可以先&lt;code&gt;save response&lt;/code&gt;到本地，再把接口请求重定向到保存的响应去)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;map remote&lt;/code&gt;(重定向到远程服务器, 客户端进行后端服务器替换，替换为&lt;code&gt;mock&lt;/code&gt;服务器)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;感觉这两个功能如果想要更高的灵活性，可以使用&lt;code&gt;mitmproxy&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;节流器&#34;&gt;节流器
&lt;/h3&gt;&lt;p&gt;可以进行网弱测试，没怎么用过(devTools 也有相应功能)&lt;/p&gt;
&lt;h3 id=&#34;端口转发&#34;&gt;端口转发
&lt;/h3&gt;&lt;p&gt;没用过，不做评价&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
